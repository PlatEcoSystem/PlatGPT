from aiogram import F, Router
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart
import os
import openai
import asyncio
from .db_rebuild import rebuild_jokes_db, rebuild_images_db
from .get_db import get_random_joke, get_random_photo

BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
db_path_joke = os.path.join(BASE_DIR, "data-prep", "processed", "jokes.db")
db_path_photo = os.path.join(BASE_DIR, "data-prep", "processed", "photos.db")

router=Router()

gpt_active_by_chat_id = {}

rebuild_jokes_db()
rebuild_images_db()

@router.message(CommandStart())
async def start(message: Message):
    await message.answer("–±—Ä–∞ –∑–¥–æ—Ä–æ–≤, —è –≤ –≥—Ä—É–ø–∞—Ö —Ç–∞–∫–∏–µ –∫–∞–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é:\n!—Ñ–æ—Ç–æ\n!—à—É—Ç–∫–∞")


@router.message(F.text == "!–ü–£–ö")
async def joke_handler(message: Message):
    question, answer = get_random_joke(db_path_joke)

    await message.answer(question)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —à—É—Ç–∫—É
    await asyncio.sleep(5)  # –∂–¥—ë–º 10 —Å–µ–∫—É–Ω–¥
    await message.answer(answer)


@router.message(F.text == '!–ë–†–ê')
async def photo(message: Message):
    filename = get_random_photo(db_path_photo)  # "photo_2025.jpg"
    photo_path = f"./dev/photos/{filename}"

    photo = FSInputFile(photo_path)  # <-- –í–æ—Ç —Ç–∞–∫ —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª
    await message.answer_photo(photo)


@router.message(F.text.lower() == "!Z")
async def enable_gpt(message: Message):
    gpt_active_by_chat_id[message.chat.id] = True
    await message.reply("GPT –≤–∫–ª—é—á—ë–Ω ü§ñ")

@router.message(F.text.lower() == "!V")
async def disable_gpt(message: Message):
    gpt_active_by_chat_id[message.chat.id] = False
    await message.reply("GPT –æ—Ç–∫–ª—é—á—ë–Ω üí§")

async def call_gpt_async(user_input: str) -> str:
    def sync_gpt_call():
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": ""},
                {"role": "user", "content": user_input}
            ]
        )
        return response.choices[0].message["content"]
    return await asyncio.to_thread(sync_gpt_call)

@router.message()
async def gpt_message_handler(message: Message):
    if not gpt_active_by_chat_id.get(message.chat.id, False):
        return  # GPT –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º

    try:
        reply = await call_gpt_async(message.text)
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"

    await message.reply(reply)

