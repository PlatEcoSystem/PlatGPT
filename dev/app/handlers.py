from aiogram import F, Router, types
from aiogram.types import Message
from aiogram.filters import CommandStart
import sqlite3
import os
import openai
import asyncio

BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
db_path_joke = os.path.join(BASE_DIR, "data-prep", "processed", "jokes.db")
db_path_photo = os.path.join(BASE_DIR, "data-prep", "processed", "images.db")

router=Router()

gpt_active_by_chat_id = {}

@router.message(CommandStart())
async def start(message: Message):
    await message.answer("–±—Ä–∞ –∑–¥–æ—Ä–æ–≤, —è –≤ –≥—Ä—É–ø–∞—Ö —Ç–∞–∫–∏–µ –∫–∞–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é:\n!–ø—É–∫\n!–∫–∞–∫–∏")

@router.message(F.text == '!–ø—É–∫')
async def joke(message: Message):
    conn = sqlite3.connect(db_path_joke)
    cursor = conn.cursor()
    cursor.execute("SELECT text FROM jokes ORDER BY RANDOM() LIMIT 1")
    joke = cursor.fetchone()
    conn.close()
    if joke:
        await message.answer(joke[0])
    else:
        await message.answer("–Ω–µ—Ç")

@router.message(F.text == '!–∫–∞–∫–∏')
async def photo(message: Message):
    conn = sqlite3.connect(db_path_photo)
    cursor = conn.cursor()
    cursor.execute("SELECT url FROM images ORDER BY RANDOM() LIMIT 1")
    photo = cursor.fetchone()
    conn.close()
    if photo:
        await message.answer(photo[0])
    else:
        await message.answer("–Ω–µ—Ç")

# –ö–æ–º–∞–Ω–¥–∞ "!–≥–æ" ‚Äî –≤–∫–ª—é—á–∏—Ç—å GPT
@router.message(F.text.lower() == "!–≥–æ")
async def enable_gpt(message: Message):
    gpt_active_by_chat_id[message.chat.id] = True
    await message.reply("GPT –≤–∫–ª—é—á—ë–Ω ü§ñ")

@router.message(F.text.lower() == "!–ø–æ–∫–∞")
async def disable_gpt(message: Message):
    gpt_active_by_chat_id[message.chat.id] = False
    await message.reply("GPT –æ—Ç–∫–ª—é—á—ë–Ω üí§")

async def call_gpt_async(user_input: str) -> str:
    def sync_gpt_call():
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –ü–ª–∞—Ç–æ–Ω ‚Äî –∏—Ä–æ–Ω–∏—á–Ω—ã–π –∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–¥—Ä–æ—Å—Ç–æ–∫."},
                {"role": "user", "content": user_input}
            ]
        )
        return response.choices[0].message["content"]
    return await asyncio.to_thread(sync_gpt_call)

@router.message()
async def gpt_message_handler(message: Message):
    if not gpt_active_by_chat_id.get(message.chat.id, False):
        return  # GPT –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º

    try:
        reply = await call_gpt_async(message.text)
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"

    await message.reply(reply)

